<!-- 
    1. Listen to Music
    2. Favorite
    3. capture snippets
 -->

 

 <%- include ('../partials/header') %>
<%- include ('../partials/menu') %>

<main>
    <!-- <link rel="stylesheet" href="/../css/music.css"> -->

    <!-- <script>

        // import React, { useState, useEffect } from 'react';

        const track = {
            name: "",
            album: {
                images: [
                    { url: "" }
                ]
            },
            artists: [
                { name: "" }
            ]
        }

        function WebPlayback(props) {

            const [is_paused, setPaused] = false;
            const [is_active, setActive] = false;
            const [player, setPlayer] = undefined;
            const [current_track, setTrack] = track;

            useEffect(() => {

                const script = document.createElement("script");
                script.src = "https://sdk.scdn.co/spotify-player.js";
                script.async = true;

                document.body.appendChild(script);

                window.onSpotifyWebPlaybackSDKReady = () => {

                    const player = new window.Spotify.Player({
                        name: 'Web Playback SDK',
                        getOAuthToken: cb => { cb(props.token); },
                        volume: 0.5
                    });

                    setPlayer(player);

                    player.addListener('ready', ({ device_id }) => {
                        console.log('Ready with Device ID', device_id);
                    });

                    player.addListener('not_ready', ({ device_id }) => {
                        console.log('Device ID has gone offline', device_id);
                    });

                    player.addListener('player_state_changed', ( state => {

                        console.log('state', state);
                        if (!state) {
                            return;
                        }
                        
                        setTrack(state.track_window.current_track);
                        setPaused(state.paused);

                        player.getCurrentState().then( state => { 
                            (!state)? setActive(false) : setActive(true) 
                        });

                    }));

                    player.connect();

                };
            }, []);

            if (!is_active) { 
                return (
                    <>
                        <div className="container">
                            <div className="main-wrapper">
                                <b> Instance not active. Transfer your playback using your Spotify app. </b>
                            </div>
                        </div>
                    </>)
            } else {
                return (
                    <>
                        <div className="container">
                            <div className="main-wrapper">

                                <img src={current_track.album.images[0].url} className="now-playing__cover" alt="" />

                                <div className="now-playing__side">
                                    <div className="now-playing__name">{current_track.name}</div>
                                    <div className="now-playing__artist">{current_track.artists[0].name}</div>

                                    <button className="btn-spotify" onClick={() => { player.previousTrack() }} >
                                        &lt;&lt;
                                    </button>

                                    <button className="btn-spotify" onClick={() => { player.togglePlay() }} >
                                        { is_paused ? "PLAY" : "PAUSE" }
                                    </button>

                                    <button className="btn-spotify" onClick={() => { player.nextTrack() }} >
                                        &gt;&gt;
                                    </button>
                                </div>
                            </div>
                        </div>
                    </>
                );
            }
        }

        // export default WebPlayback

    </script> -->

    <script src="https://sdk.scdn.co/spotify-player.js"></script>

    <script type="text/JavaScript" src="http://code.jquery.com/jquery-1.11.2.js"></script>
    <script type="text/JavaScript" src="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.js"></script>

    <% if(tokens !== 'undefined'){ %> 
    <script>


        var track = {
            name: "",
            album: {
                images: [
                    { url: "" }
                ]
            },
            artists: [
                { name: "" }
            ]
        }

        var is_paused  = false;
        var is_active = false;
        // const player = undefined;
        var current_track = undefined;

        window.onSpotifyWebPlaybackSDKReady = () => {
            // console.log(tokens.access)
            

            const token = '<%= tokens %>';
            console.log(token);
            const player = new Spotify.Player({
                name: 'Web Playback SDK Quick Start Player',
                getOAuthToken: cb => { cb(token); },
                volume: 0.5
            });

            // Ready
            player.addListener('ready', ({ device_id }) => {
                console.log('Ready with Device ID', device_id);
                 var s = "curl --request PUT \\\n" +
                    "  --url https://api.spotify.com/v1/me/player \\\n" + 
                    "  --header 'Authorization: Bearer " +  '<%= tokens %>' + "'\\\n" +
                    "  --header 'Content-Type: application/json' \\\n" +  
                    "  --data '{" + "\"device_ids\""+ ": " + "[" + "\"";

                console.log(s + device_id + "\"" + "]}\'"); 
            });

            // Not Ready
            player.addListener('not_ready', ({ device_id }) => {
                console.log('Device ID has gone offline', device_id);
            });

            player.addListener('initialization_error', ({ message }) => {
                console.error(message);
            });

            player.addListener('authentication_error', ({ message }) => {
                console.error(message);
            });

            player.addListener('account_error', ({ message }) => {
                console.error(message);
            });

            // document.getElementById('togglePlay').onclick = function() {
            //   player.togglePlay();
            // };

            player.addListener('player_state_changed', ( state => {

                console.log('state', state);
                if (!state) {
                    return;
                }
                
                track = state.track_window.current_track;
                is_paused = state.paused;

                player.getCurrentState().then( state => { 
                    (!state)? is_active = false : is_active = true 
                });

            }));

            player.addListener('player_state_changed', ({
                position,
                duration,
                track_window: { current_track }
            }) => {
                console.log('Currently Playing', current_track.name);
                console.log('Position in Song', position);
                console.log('Duration of Song', duration);
                console.log(current_track.album.images[0].url);
                document.querySelector('now-playing__cover').src = current_track.album.images[0].url;
                document.querySelector('now-playing__name').innerText = current_track.name;
                document.querySelector('now-playing__artist').innerText = current_track.artists[0].name;
            });

            player.resume().then(() => {
                console.log('Resumed!');
            });

            player.connect();
        
            // document.querySelector('now-playing__cover').src = current_track.album.images[0].url;
            // document.querySelector('now-playing__name').innerHTML = current_track.name;
            // document.querySelector('now-playing__artist').innerHTML = current_track.artists[0].name;
            // document.querySelector('')



            var audioPlayer = document.querySelector('.green-audio-player');
            var playPause = audioPlayer.querySelector('#playPause');
            var playpauseBtn = audioPlayer.querySelector('.play-pause-btn');
            var loading = audioPlayer.querySelector('.loading');
            var progress = audioPlayer.querySelector('.progress');
            var sliders = audioPlayer.querySelectorAll('.slider');
            var volumeBtn = audioPlayer.querySelector('.volume-btn');
            var volumeControls = audioPlayer.querySelector('.volume-controls');
            var volumeProgress = volumeControls.querySelector('.slider .progress');
            // var player = audioPlayer.querySelector('audio');
            var currentTime = audioPlayer.querySelector('.current-time');
            var totalTime = audioPlayer.querySelector('.total-time');
            var speaker = audioPlayer.querySelector('#speaker');

            var draggableClasses = ['pin'];
            var currentlyDragged = null;

            window.addEventListener('mousedown', function(event) {
            
            if(!isDraggable(event.target)) return false;
            
            currentlyDragged = event.target;
            let handleMethod = currentlyDragged.dataset.method;
            
            this.addEventListener('mousemove', window[handleMethod], false);

            window.addEventListener('mouseup', () => {
                currentlyDragged = false;
                window.removeEventListener('mousemove', window[handleMethod], false);
            }, false);  
            });

            playpauseBtn.addEventListener('click', togglePlay);
            player.addEventListener('timeupdate', updateProgress);
            player.addEventListener('volumechange', updateVolume);
            player.addEventListener('loadedmetadata', () => {
                totalTime.textContent = formatTime(player.duration);
            });
            player.addEventListener('canplay', makePlay);
            player.addEventListener('ended', function(){
                playPause.attributes.d.value = "M18 12L0 24V0";
                player.currentTime = 0;
            });

            volumeBtn.addEventListener('click', () => {
                volumeBtn.classList.toggle('open');
                volumeControls.classList.toggle('hidden');
            })

            window.addEventListener('resize', directionAware);

            sliders.forEach(slider => {
                let pin = slider.querySelector('.pin');
                slider.addEventListener('click', window[pin.dataset.method]);
            });

            directionAware();

            function isDraggable(el) {
                let canDrag = false;
                let classes = Array.from(el.classList);
                draggableClasses.forEach(draggable => {
                    if(classes.indexOf(draggable) !== -1)
                    canDrag = true;
                })
                return canDrag;
            }

            function inRange(event) {
                let rangeBox = getRangeBox(event);
                let rect = rangeBox.getBoundingClientRect();
                let direction = rangeBox.dataset.direction;
                if(direction == 'horizontal') {
                    var min = rangeBox.offsetLeft;
                    var max = min + rangeBox.offsetWidth;   
                    if(event.clientX < min || event.clientX > max) return false;
                } else {
                    var min = rect.top;
                    var max = min + rangeBox.offsetHeight; 
                    if(event.clientY < min || event.clientY > max) return false;  
                }
                return true;
            }

            function updateProgress() {
                var current = player.currentTime;
                var percent = (current / player.duration) * 100;
                progress.style.width = percent + '%';
                
                currentTime.textContent = formatTime(current);
            }

            function updateVolume() {
                volumeProgress.style.height = player.volume * 100 + '%';
                if(player.volume >= 0.5) {
                    speaker.attributes.d.value = 'M14.667 0v2.747c3.853 1.146 6.666 4.72 6.666 8.946 0 4.227-2.813 7.787-6.666 8.934v2.76C20 22.173 24 17.4 24 11.693 24 5.987 20 1.213 14.667 0zM18 11.693c0-2.36-1.333-4.386-3.333-5.373v10.707c2-.947 3.333-2.987 3.333-5.334zm-18-4v8h5.333L12 22.36V1.027L5.333 7.693H0z';  
                } else if(player.volume < 0.5 && player.volume > 0.05) {
                    speaker.attributes.d.value = 'M0 7.667v8h5.333L12 22.333V1L5.333 7.667M17.333 11.373C17.333 9.013 16 6.987 14 6v10.707c2-.947 3.333-2.987 3.333-5.334z';
                } else if(player.volume <= 0.05) {
                    speaker.attributes.d.value = 'M0 7.667v8h5.333L12 22.333V1L5.333 7.667';
                }
            }

            function getRangeBox(event) {
                let rangeBox = event.target;
                let el = currentlyDragged;
                if(event.type == 'click' && isDraggable(event.target)) {
                    rangeBox = event.target.parentElement.parentElement;
                }
                if(event.type == 'mousemove') {
                    rangeBox = el.parentElement.parentElement;
                }
                return rangeBox;
            }

            function getCoefficient(event) {
                let slider = getRangeBox(event);
                let rect = slider.getBoundingClientRect();
                let K = 0;
                if(slider.dataset.direction == 'horizontal') {
                    
                    let offsetX = event.clientX - slider.offsetLeft;
                    let width = slider.clientWidth;
                    K = offsetX / width;    
                    
                } else if(slider.dataset.direction == 'vertical') {
                    
                    let height = slider.clientHeight;
                    var offsetY = event.clientY - rect.top;
                    K = 1 - offsetY / height;
                    
                }
                return K;
            }

            function rewind(event) {
                if(inRange(event)) {
                    player.currentTime = player.duration * getCoefficient(event);
                }
            }

            function changeVolume(event) {
                if(inRange(event)) {
                    player.volume = getCoefficient(event);
                }
            }

            function formatTime(time) {
                var min = Math.floor(time / 60);
                var sec = Math.floor(time % 60);
                return min + ':' + ((sec<10) ? ('0' + sec) : sec);
            }

            function togglePlay() {
                if(player.paused) {
                    playPause.attributes.d.value = "M0 0h6v24H0zM12 0h6v24h-6z";
                    player.play();
                } else {
                    playPause.attributes.d.value = "M18 12L0 24V0";
                    player.pause();
                }  
            }

            function makePlay() {
                playpauseBtn.style.display = 'block';
                loading.style.display = 'none';
            }

            function directionAware() {
                if(window.innerHeight < 250) {
                    volumeControls.style.bottom = '-54px';
                    volumeControls.style.left = '54px';
                } else if(audioPlayer.offsetTop < 154) {
                    volumeControls.style.bottom = '-164px';
                    volumeControls.style.left = '-3px';
                } else {
                    volumeControls.style.bottom = '52px';
                    volumeControls.style.left = '-3px';
                }
            }
        }
    </script>

    <% } %> 
    <style lang="scss">
        body {
            margin: 0;
        }

        .holder {
        display: flex;
        flex-direction: column;
        align-items: center;

        .get-it-on-github {
            margin-top: 24px;
            margin-bottom: 24px;
            font-family: "Roboto";
            color: #55606e;
        }
        }

        .audio.green-audio-player {
        width: 400px;
        min-width: 300px;
        height: 56px;
        box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.07);
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-left: 24px;
        padding-right: 24px;
        border-radius: 4px;
        user-select: none;
        -webkit-user-select: none;
        background-color: #fff;
        .play-pause-btn {
            display: none;
            cursor: pointer;
        }
        .spinner {
            width: 18px;
            height: 18px;
            background-image: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/355309/loading.png);
            background-size: cover;
            background-repeat: no-repeat;
            animation: spin 0.4s linear infinite;
        }
        .slider {
            flex-grow: 1;
            background-color: #d8d8d8;
            cursor: pointer;
            position: relative;
            .progress {
            background-color: #44bfa3;
            border-radius: inherit;
            position: absolute;
            pointer-events: none;
            .pin {
                height: 16px;
                width: 16px;
                border-radius: 8px;
                background-color: #44bfa3;
                position: absolute;
                pointer-events: all;
                box-shadow: 0px 1px 1px 0px rgba(0, 0, 0, 0.32);
            }
            }
        }
        .controls {
            font-family: "Roboto", sans-serif;
            font-size: 16px;
            line-height: 18px;
            color: #55606e;
            display: flex;
            flex-grow: 1;
            justify-content: space-between;
            align-items: center;
            margin-left: 24px;
            margin-right: 24px;
            .slider {
            margin-left: 16px;
            margin-right: 16px;
            border-radius: 2px;
            height: 4px;
            .progress {
                width: 0;
                height: 100%;
                .pin {
                right: -8px;
                top: -6px;
                }
            }
            }
            span {
            cursor: default;
            }
        }
        .volume {
            position: relative;
            .volume-btn {
            cursor: pointer;
            &.open path {
                fill: #44bfa3;
            }
            }
            .volume-controls {
            width: 30px;
            height: 135px;
            background-color: rgba(0, 0, 0, 0.62);
            border-radius: 7px;
            position: absolute;
            left: -3px;
            bottom: 52px;
            flex-direction: column;
            align-items: center;
            display: flex;
            &.hidden {
                display: none;
            }
            .slider {
                margin-top: 12px;
                margin-bottom: 12px;
                width: 6px;
                border-radius: 3px;
                .progress {
                bottom: 0;
                height: 100%;
                width: 6px;
                .pin {
                    left: -5px;
                    top: -8px;
                }
                }
            }
            }
        }
        }
        svg,
        img {
            display: block;
        }

        html,
        body {
            height: 100%;
        }

        /* body {
        display: flex;
        justify-content: center;
        align-items: center;
        background: #f8ffae;
        background: -webkit-linear-gradient(-65deg, #43c6ac, #f8ffae);
        background: linear-gradient(-65deg, #43c6ac, #f8ffae);
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        } */

        @keyframes spin {
            from {
                transform: rotateZ(0);
            }
            to {
                transform: rotateZ(1turn);
            }
        }
    </style>

    <script>
        function ShowSong(count) {
            var div = "ShowSong" + count
            var Song = document.getElementById(div);
            Song.style.display = "block";  // <-- Set it to block
        }
    </script>

    <script>
        function CloseSong(count) {
            var div = "ShowSong" + count
        var Song = document.getElementById(div);
        Song.style.display = "none";  // <-- Set it to block
        }
    </script>

    <div class="container">
        <h1>Make a Snippet!</h1>
        <form action="/music" method="post">
            <div class="form-group row">
                <label for="song name" class="col-sm-2 col-form-label">Enter a song title</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" id="songName" name="songName">
                </div>
            </div>

            <div class="submit_btn">
                <button type="submit"  class="btn btn-primary" id = "submit-button" 
                style ="background-color:rgb(79, 124, 172); border-color: rgb(79, 124, 172); color:rgb(255, 255, 255); color:rgb(30, 30, 30);">
                Search</button>
            </div>
        </form>

         <div className="container">
            <div className="main-wrapper">

                <img src="https://i.ytimg.com/vi/b5xT0AAjMGc/hqdefault.jpg" className="now-playing__cover" alt="" />

                <div className="now-playing__side">
                    <div className="now-playing__name">name</div>
                    <div className="now-playing__artist">artist</div>

                    <!-- <button className="btn-spotify" onClick={() => { player.previousTrack() }} >
                        &lt;&lt;
                    </button>

                    <button className="btn-spotify" onClick={() => { player.togglePlay() }} >
                        { is_paused ? "PLAY" : "PAUSE" }
                    </button>

                    <button className="btn-spotify" onClick={() => { player.nextTrack() }} >
                        &gt;&gt;
                    </button> -->
                </div>
            </div>
        </div>
    
        <% if(results !== 'undefined'){ %> 
            <% var count = 0 %> 
            <% results.forEach(el => { %>
                <% count = count + 1 %> 

            <div class="row">
                <div class="col">  
                        
                            
                                <div class="card mb-3" style="max-width: 540px;">
                                    <div class="row">
                                        <div class="col-md-4">
                                        
                                            <img src="<%= el.album.images[0].url %>" class="img-thumbnail rounded-start" style="width: auto; height: 195px;" alt="...">
                                        </div>

                                        <div class="col-md-8">
                                            <div class="card-body"> 
                                                <h5 class="card-title"> Title: <%= el.name %>  </h5>
                                                <h6 class="card-text"> Artist: <%= el.artists[0].name %>  </h6>
                                                <button type="submit"  class="btn btn-primary" onclick="ShowSong(<%= count %>)" id = "submit-button" data-toggle="modal" data-target="#myModal" 
                                                    style ="background-color:rgb(79, 124, 172); border-color: rgb(79, 124, 172); color:rgb(255, 255, 255); color:rgb(30, 30, 30);">
                                                    Use this song </button>
                                            </div>
                                        </div>   
                                    </div>
                                </div>   
                </div>

                <div class="col" style="display: none;" id="ShowSong<%= count %>"> 
                <!-- <div class="container d-flex justify-content-center my-4 mb-5"> -->

                    <div id="mobile-box">

                        <!-- Card -->
                        <div class="card">
                            <div class="bg-image hover-overlay ripple" data-mdb-ripple-color="light">
                                <img class="card-img-top" src="<%= el.album.images[0].url %>"
                                    alt="Card image cap">
                                <a href="#!">
                                    <div class="mask" style="background-color: rgba(251, 251, 251, 0.15);"></div>
                                </a>
                            </div>

                            <div class="card-body text-center">

                                <h5 class="h5 font-weight-bold"> <%= el.artists[0].name %> </h5>
                                <p class="mb-0"> <%= el.name %> </p>

                                <div class="holder">
                                    <div class="audio green-audio-player">
                                      <!-- <div class="loading">
                                        <div class="spinner"></div>
                                      </div> -->
                                      <div class="play-pause-btn">  
                                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="24" viewBox="0 0 18 24">
                                          <path fill="#566574" fill-rule="evenodd" d="M18 12L0 24V0" class="play-pause-icon" id="playPause"/>
                                        </svg>
                                      </div>
                                  
                                      <div class="controls">
                                        <span class="current-time">0:00</span>
                                        <div class="slider" data-direction="horizontal">
                                          <div class="progress">
                                            <div class="pin" id="progress-pin" data-method="rewind"></div>
                                          </div>
                                        </div>
                                        <span class="total-time">0:00</span>
                                      </div>
                                  
                                      <div class="volume">
                                        <div class="volume-btn">
                                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                            <path fill="#566574" fill-rule="evenodd" d="M14.667 0v2.747c3.853 1.146 6.666 4.72 6.666 8.946 0 4.227-2.813 7.787-6.666 8.934v2.76C20 22.173 24 17.4 24 11.693 24 5.987 20 1.213 14.667 0zM18 11.693c0-2.36-1.333-4.386-3.333-5.373v10.707c2-.947 3.333-2.987 3.333-5.334zm-18-4v8h5.333L12 22.36V1.027L5.333 7.693H0z" id="speaker"/>
                                          </svg>
                                        </div>
                                        <div class="volume-controls hidden">
                                          <div class="slider" data-direction="vertical">
                                            <div class="progress">
                                              <div class="pin" id="volume-pin" data-method="changeVolume"></div>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                  
                                      <audio crossorigin>
                                        <source src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/355309/Swing_Jazz_Drum.mp3" type="audio/mpeg">
                                      </audio>
                                    </div>

                            </div>

                            <div class="card-footer text-center">
                                <button type="submit"  class="btn btn-primary" onclick="" id = "submit-button"
                                style ="background-color:rgb(79, 124, 172); border-color: rgb(79, 124, 172); color:rgb(255, 255, 255); color:rgb(30, 30, 30);">Confirm Snippet</button>
                                <butto type="submit"  class="btn btn-primary" onclick="CloseSong( <%= count %> )" id = "submit-button" 
                                style ="background-color:rgb(79, 124, 172); border-color: rgb(79, 124, 172); color:rgb(255, 255, 255); color:rgb(30, 30, 30);"n>Close Song</button>
                            </div>
                        </div>
                        <!-- Card -->
                    </div>
                </div>
            <!-- Content -->
            </div>
            <% }); %>
        <% } %> 
    </div>
</main>


<%- include ('../partials/footer') %>